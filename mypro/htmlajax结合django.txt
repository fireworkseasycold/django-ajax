ajax：
1.基本写法
$.ajax({
url:'', //接口地址
type：'', //默认是get;
header:{},
data:'' //给后端的数据 json类型
success:function(res){
//请求成功的函数 httpstatuscode=200，这里函数可以引用命名单独拿出来写
},
error:function(e){
//请求失败后的函数 httpstatuscode!=200
}
})


2.ajax与html,django的交互
url:path('index/',views.index), #静态页面
    #后台接口
    path('indexApi/',views.indexApi),
    path('indexApi2',views.indexApi2),
    path('indexApi3',views.indexApi3),
    path('indexApi4',views.indexApi4),
    path('indexApi5',views.indexApi5),
    path('indexApi6',views.indexApi6),
简单模拟前后端分离
    2.1django作为静态网页服务器 ，来部署页面
    def index(request):
        return render(request,'test.html')

    2.2同时django作为后台服务器，来开发后台接口

    #无参数的get的 api（表单提交）
    def indexApi(request):
        return JsonResponse({'code':200,'msg':'这是后端jsonresponse','data':'ajax-get不传参'})

    #带参数的get的 api（表单提交），参数会 ？拼接ajax参数
    def indexApi2(request):
        print(request.GET)
        param=request.GET
        print(param.get('Api2'))
        return JsonResponse({'code':200,'msg':'这是后端jsonresponse','data':'ajax-get传参,参数是：{0}'.format(param.get('Api2'))})



    #无参数的post的 api
    @csrf_exempt  #防止csrf
    def indexApi3(request):
        return JsonResponse({'code':200,'msg':'这是后端jsonresponse','data':'ajax-post不传参'})

    #有参数的post的 api
    @csrf_exempt  #防止csrf
    def indexApi4(request):
        param1=request.body
        print(param1)
        param2=request.POST
        print(param2)
        return JsonResponse({'code':200,'msg':'这是后端jsonresponse','data':'ajax-post传参,参数是：{0}'.format(param2.get('Api4'))})

    #表单提交
    @csrf_exempt  #防止csrf
    def indexApi5(request):
        param=request.POST
        print(param)
        name=param.get('name')
        age=param.get('age')
        return JsonResponse({'code':200,'msg':'ajax post表单','data':'{}今年{}岁'.format(name,age)})

    #json格式表单提交，POST无法获取
    @csrf_exempt  #防止csrf
    def indexApi6(request):
        # print(request.method)
        param_b=request.body
        print(param_b)
        param_dict=json.loads(param_b) #将json格式数据转换为python字典类型,即对对象进行json decode解码
        print(param_dict)
        return JsonResponse({'code':200,'msg':'ajax post json格式提交表单','data':'{}'.format(param_dict)})

